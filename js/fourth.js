/*
#1. Написать функцию, преобразующую число в объект. Передавая на вход число от 0 до 999, мы должны получить на выходе объект, в котором в соответствующих свойствах описаны единицы, десятки и сотни. Например, для числа 245 мы должны получить следующий объект: {‘единицы’: 5, ‘десятки’: 4, ‘сотни’: 2}. Если число превышает 999, необходимо выдать соответствующее сообщение с помощью console.log и вернуть пустой объект.
*/
(function (number) {
    let outObj = {};
    number = parseInt(number);
    number = (number > 0) ? number : -1 * number;
    const str = number + '';
    const count = str.length;
    if (count > 3) {
        console.log(`Ваше число ${number} - больше 999\r\n`);
    } else {
        outObj.units = str[2];
        outObj.dozens = str[1];
        outObj.handreds = str[0];
        
        console.log(outObj);
    }
})(951);
/*
#2. Продолжить работу с интернет-магазином:
В прошлом домашнем задании вы реализовали корзину на базе массивов. Какими объектами можно заменить их элементы?
Реализуйте такие объекты.
Перенести функционал подсчета корзины на объектно-ориентированную базу.
*/
class Product {
    constructor(name, price) {
        this.name = name,
        this.price = price
    }
}
a = new Product ('Mars', 200);
b = new Product ('Snikers', 400);
c = new Product ('Bounty', 800);

let basket = [a,b,c];
const sum = basket.reduce((a,x) => a += parseInt(x.price), 0);
console.log(sum);
/*
#3.* Подумать над глобальными сущностями. К примеру, сущность «Продукт» в интернет-магазине актуальна не только для корзины, но и для каталога. Стремиться нужно к тому, чтобы объект «Продукт» имел единую структуру для различных модулей сайта, но в разных местах давал возможность вызывать разные методы.
*/